from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
import numpy as np
import os
import matplotlib.pyplot as plt
from os import listdir
from sklearn import metrics
from keras.models import Sequential
from keras.layers import Conv2D
from  keras.layers import MaxPooling2D
from keras.layers import Dense
from keras.layers import Flatten
import tensorflow  as tf

classifier=tf.keras.Sequential()
train_datagen=tf.keras.preprocessing.image.ImageDataGenerator(rescale=1./255,shear_range=0.2,zoom_range=0.2,horizontal_flip=True)
test_datagen=tf.keras.preprocessing.image.ImageDataGenerator(rescale=1./255)

#creating training set
training_set=train_datagen.flow_from_directory("/content/drive/MyDrive/cat_dog/training_set",target_size=(64,64),batch_size=32,class_mode="binary")

# creating test set
test_set=test_datagen.flow_from_directory("//content/drive/MyDrive/cat_dog/test_set",target_size=(64,64),batch_size=32,class_mode="binary")


classifier.add(tf.keras.layers.Conv2D(32,(3,3),input_shape=(64,64,3),activation="relu"))
classifier.add(MaxPooling2D(pool_size=(2,2)))
classifier.add(Flatten())
classifier.add(Dense(128,activation="relu"))
classifier.add(Dense(128,activation="relu"))
classifier.add(Dense(1,activation="sigmoid"))

classifier.compile(optimizer="adam",loss="binary_crossentropy",metrics=["accuracy"])
classifier.fit_generator(training_set,epochs=25,validation_data=test_set)

def predict_image(imagepath, classifier):
  ## loading data from imagepath
    predict = tf.keras.preprocessing.image.load_img(imagepath, target_size = (64, 64))

    ## converting image into array
    predict_modified = tf.keras.preprocessing.image.img_to_array(predict)

    ## Normalising array
    predict_modified = predict_modified / 255
    print(predict_modified.shape)

    ## Adding extra dimension
    predict_modified = np.expand_dims(predict_modified, axis = 0)
    print(predict_modified.shape)

    result = classifier.predict(predict_modified)   #[[0.5]]
    print(result)
    if result[0][0] >= 0.5:
        prediction = 'dog'
        probability = result[0][0]
        print ("probability = " + str(probability))
        print("Prediction = " + prediction)
    else:
        prediction = 'cat'
        probability = 1 - result[0][0]
        print ("probability = " + str(probability))
        print("Prediction = " + prediction)
predict_image("/content/cat.4001.jpg",classifier)
predict_image("/content/dog.4001.jpg",classifier)

def predict_image(imagepath, classifier):
  ## loading data from imagepath
    predict = tf.keras.preprocessing.image.load_img(imagepath, target_size = (64, 64))

    ## converting image into array
    predict_modified = tf.keras.preprocessing.image.img_to_array(predict)

    ## Normalising array
    predict_modified = predict_modified / 255
    print(predict_modified.shape)

    ## Adding extra dimension
    predict_modified = np.expand_dims(predict_modified, axis = 0)
    print(predict_modified.shape)

    result = classifier.predict(predict_modified)   #[[0.5]]
    print(result)
    if result[0][0] >= 0.5:
        prediction = 'dog'
        probability = result[0][0]
        print ("probability = " + str(probability))
        print("Prediction = " + prediction)
    else:
        prediction = 'cat'
        probability = 1 - result[0][0]
        print ("probability = " + str(probability))
        print("Prediction = " + prediction)
predict_image("/content/cat.4001.jpg",classifier)
predict_image("/content/dog.4001.jpg",classifier)

import matplotlib.pyplot as plt
from tensorflow import keras
from keras.preprocessing import image
path="/content/cat.4001.jpg"
img=image.load_img(path)
plt.imshow(img)
predict_image("/content/cat.4001.jpg",classifier)


path="/content/dog.4001.jpg"
img=image.load_img(path)
plt.imshow(img)
predict_image("/content/dog.4001.jpg",classifier)
